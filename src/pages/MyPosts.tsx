import { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import BottomNav from '../components/BottomNav';
import Post from '../components/Post';

interface Comment {
  id: string;
  userId: string;
  userName: string;
  text: string;
  timestamp: number;
}

interface Post {
  id: string;
  userId: string;
  userName: string;
  imageUrl: string;
  description: string;
  timestamp: number;
  likes: number;
  rating: number;
  ratingCount: number;
  comments: Comment[];
}

const MY_POSTS: Post[] = [
  {
    id: '1',
    userId: 'currentUser',
    userName: 'You',
    imageUrl: 'https://images.unsplash.com/photo-1515886657613-9f3515b0c78f?w=800',
    description: 'My weekend outfit generated by AI! What do you think? ðŸŒŸ',
    timestamp: Date.now() - 86400000,
    likes: 15,
    rating: 4.2,
    ratingCount: 6,
    comments: [
      {
        id: 'c1',
        userId: 'user2',
        userName: 'Emma',
        text: 'Perfect for the weekend!',
        timestamp: Date.now() - 43200000
      }
    ]
  }
];

export default function MyPosts() {
  const navigate = useNavigate();
  const [posts, setPosts] = useState<Post[]>(MY_POSTS);

  const handleLike = (postId: string) => {
    setPosts(prev => prev.map(post => {
      if (post.id === postId) {
        return { ...post, likes: post.likes + 1 };
      }
      return post;
    }));
  };

  const handleRate = (postId: string, rating: number) => {
    setPosts(prev => prev.map(post => {
      if (post.id === postId) {
        const newRatingCount = post.ratingCount + 1;
        const newRating = ((post.rating * post.ratingCount) + rating) / newRatingCount;
        return { ...post, rating: newRating, ratingCount: newRatingCount };
      }
      return post;
    }));
  };

  const handleComment = (postId: string, text: string) => {
    const newComment: Comment = {
      id: Date.now().toString(),
      userId: 'currentUser',
      userName: localStorage.getItem('userName') || 'You',
      text,
      timestamp: Date.now()
    };

    setPosts(prev => prev.map(post => {
      if (post.id === postId) {
        return { ...post, comments: [...post.comments, newComment] };
      }
      return post;
    }));
  };

  return (
    <div className="min-h-screen bg-gray-50 pb-16">
      {/* Header */}
      <header className="bg-white shadow-sm">
        <div className="max-w-2xl mx-auto px-6 py-4">
          <div className="flex items-center justify-between">
            <h1 className="text-2xl font-bold text-black">My Posts</h1>
            <button
              onClick={() => navigate('/social')}
              className="text-sm text-gray-600 hover:text-black"
            >
              Back to Feed
            </button>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main className="max-w-2xl mx-auto px-6 py-6 space-y-6">
        {posts.length > 0 ? (
          posts.map((post) => (
            <Post
              key={post.id}
              post={post}
              onLike={handleLike}
              onRate={handleRate}
              onComment={handleComment}
            />
          ))
        ) : (
          <div className="text-center py-12">
            <p className="text-gray-500">You haven't posted any outfits yet.</p>
            <button
              onClick={() => navigate('/home')}
              className="mt-4 px-6 py-3 bg-black text-white rounded-lg"
            >
              Generate Your First Outfit
            </button>
          </div>
        )}
      </main>

      <BottomNav />
    </div>
  );
}